# 5-1. 리스트(= 순서를 가지는 객체의 집합)

# 지하철 칸 별로 10명, 20명, 30명
subway = [10, 20, 30] 
print(subway) # [10, 20, 30]

subway = ["유재석", "조세호", "박명수"]
print(subway) # ['유재석', '조세호', '박명수']  

# 조세호씨가 몇 번째 칸에 타고 있는가?
print(subway.index("조세호")) # 1

# 하하씨가 다음 정류장에서 다음 칸에 탑승 함
subway.append("하하")
print(subway) # ['유재석', '조세호', '박명수', '하하']

# 정형돈씨를 유재석 / 조세호 사이에 태워보기
subway.insert(1, "정형돈")
print(subway) # ['유재석', '정형돈', '조세호', '박명수', '하하']

# 지하철에 있는 사람을 한 명씩 뒤에서 꺼내기
print(subway.pop()) # 하하
print(subway) # ['유재석', '정형돈', '조세호', '박명수']
print(subway.pop()) # 박명수
print(subway) # ['유재석', '정형돈', '조세호'] 
print(subway.pop()) # 조세호
print(subway) # ['유재석', '정형돈']

# 같은 이름의 사람이 몇 명 있는지 확인하기
subway.append("유재석")
print(subway) # ['유재석', '정형돈', '유재석']
print(subway.count("유재석")) # 2

# 정렬도 가능
num_list = [5,2,4,3,1]
num_list.sort()
print(num_list) # [1, 2, 3, 4, 5]

# 순서 뒤집기 가능
num_list.reverse()
print(num_list) # [5, 4, 3, 2, 1]

# 모두 지우기
num_list.clear()
print(num_list) # []

# 다양한 자료형 함께 사용
num_list = [5,2,4,3,1]
mix_list = ["조세호", 20, True]
print(mix_list) # ['조세호', 20, True]

# 리스트 확장
num_list.extend(mix_list)
print(num_list) # [5, 2, 4, 3, 1, '조세호', 20, True] 


# 5-2. 사전(dictionary)_사전의 경우 {} 중괄호로 열고 닫기
cabinet = {3:"유재석", 100:"김태호"}
print(cabinet[3])
print(cabinet[100])

print(cabinet.get(3))
#print(cabinet[5]) => []; 값이 없는 경우에 오류를 출력시키고 프로그램이 종료됨
print(cabinet.get(5)) # get; 값이 없으면 None이라고 출력하고 계속 이어 나갈 수 있음
print(cabinet.get(5, "사용 가능")) # 5라는 값이 있으면 출력, 없으면 사용 가능으로 출력
print("hi")

print(3 in cabinet) # True
print(5 in cabinet) # False

cabinet = {"A-3":"유재석", "B-100":"김태호"}
print(cabinet["A-3"])
print(cabinet["B-100"])

# 새 손님
print(cabinet)
cabinet["A-3"] = "김종국"
cabinet["C-20"] = "조세호"
print(cabinet)

# 간 손님
del cabinet["A-3"]
print(cabinet)

# key 들만 출력
print(cabinet.keys())

# value 들만 출력
print(cabinet.values())

# key, value 쌍으로 출력
print(cabinet.items())

# 목욕탕 폐점
cabinet.clear()
print(cabinet)


# 5-3. 튜플 (= 변경되지 않는 목록을 사용할 때 활용 / 리스트보다 속도 빠름)
menu = ("돈까스", "치즈까스")
print(menu[0])
print(menu[1])

# menu.add("생선까스")

# name = "김종국"
# age = 20
# hobby = "코딩"
# print(name, age, hobby)

(name, age, hobby) = ("김종국", 20, "코딩")
print(name, age, hobby)


# 5-4. 세트 (= 집합)
# 중복 안됨, 순서 없음
my_set = {1,2,3,3,3}
print(my_set)

java = {"유재석", "김태호", "양세형"}
python = set(["유재석", "박명수"])

# 교집합 (java 와 python을 모두 할 수 있는 사람)
print(java & python)
print(java.intersection(python))

# 합집합 (java 할 수 있거나 python을 할 수 있는 사람)
print(java | python)
print(java.union(python)) # 순서 보장 되지 않음

# 차집합 (java 할 수 있지만 python은 할 수 없는 사람)
print(java - python)
print(java.difference(python))

# python 할 수 아는 사람이 늘어남
python.add("김태호")
print(python)

# java 를 잊었어요
java.remove("김태호")
print(java)


# 5-5. 자료구조의 변경
menu = {"커피", "우유", "주스"}
print(menu, type(menu)) # {'우유', '커피', '주스'} <class 'set'>

menu = list(menu)
print(menu, type(menu)) # ['우유', '커피', '주스'] <class 'list'>

menu = tuple(menu)
print(menu, type(menu)) # ('우유', '커피', '주스') <class 'tuple'>

menu = set(menu)
print(menu, type(menu))


# Quiz) 당신의 학교에서는 파이썬 코딩 대회를 주최합니다.
# 참석률을 높이기 위해 댓글 이벤트를 진행하기로 하였습니다.
# 댓글 작성자들 중에 추첨을 통해 1명은 치킨, 3명은 커피 쿠폰을 받게 됩니다.
# 추첨 프로그램을 작성하시오.

# 조건1: 편의상 댓글은 20명이 작성하였고 아이디는 1~20 이라고 가정
# 조건2: 댓글 내용과 상관 없이 무작위롤 추첨하되 중복 불가
# 조건3: random 모듈의 shuffle 과 sample 을 활용

# (출력 예제)
# -- 당첨자 발표 --
# 치킨 당첨자 : 1
# 커피 당첨자 : [2, 3, 4]
# -- 축하합니다 --

# (활용 예제) _ 내가 하다 포기..

from random import *
lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
shuffle(lst)
coffee = sample(lst, 1)
coffee = set(coffee)
print(coffee)

lst = set(lst)
print(lst)
#lst.remove(coffee)


print("-- 당첨자 발표 --")
print("치킨 당첨자: ",coffee)
print("커피 당첨자: ", )
print("-- 축하합니다 --")

# 강의 모범 
from random import *

users = range(1, 21) # 1부터 20까지 숫자를 생성
#print(type(users))
users = list(users)
#print(type(users))

print(users)
shuffle(users)
print(users)

winners = sample(users, 4) # 4명 중에서 1명은 치킨, 3명은 커피

print("-- 당첨자 발표 --")

print("치킨 당첨자: {0}".format(winners[0]))
print("커피 당첨자: {0}".format(winners[1:]))

print("-- 축하합니다 --")
